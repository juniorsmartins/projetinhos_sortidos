server.port=8091


# --------------------------------------------------
# Config Postgres
# --------------------------------------------------
# URL de conexão com o banco de dados. Aqui utilizamos o driver JDBC do Postgresql para conectar ao banco local nome_do_banco.
spring.datasource.url=jdbc:postgresql://localhost:5432/tarefas?createDatabaseIfNotExist=true&serverTimezone=UTC
# Credenciais de acesso ao banco.
spring.datasource.username=postgres
spring.datasource.password=postgres
# Especifica a classe do driver JDBC do Postgresql.
spring.datasource.driver-class-name=org.postgresql.Driver
# --------------------------------------------------



# --------------------------------------------------
# Config JPA
# --------------------------------------------------
# Configura o JPA para exibir as consultas SQL geradas pela aplicação. Essa configuração é útil para fins de depuração.
spring.jpa.show-sql=true
# Define o modo de geração de esquema do Hibernate. none é uma opção comum para desabilitar a geração automática de esquema.
spring.jpa.hibernate.ddl-auto=create-drop
# Define o dialeto do Hibernate a ser usado. Neste caso, estamos usando o dialeto específico do Postgresql.
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# Utilizada para formatar as consultas SQL geradas pelo Hibernate para torná-las mais legíveis e fáceis de depurar.
# Quando esta configuração é definida como "true", o Hibernate formata as consultas SQL adicionando quebras de linha
# e indentação, o que pode ajudar a entender como a consulta está sendo executada no banco de dados.
spring.jpa.properties.hibernate.format_sql=true
# --------------------------------------------------



# --------------------------------------------------
# CONFIGURAÇÃO DO POOL DE CONEXÕES
# --------------------------------------------------
# Configurações de pool de conexões: O Spring Boot inclui um pool de conexões de banco de dados padrão.
# No entanto, você pode personalizar as configurações de pool de conexões, por exemplo, definindo o tamanho
# máximo do pool de conexões, o tempo máximo de espera por uma conexão ou o tempo de vida máximo de uma conexão.
# Essas configurações são específicas para o HikariCP, o pool de conexões padrão do Spring Boot.
# --------------------------------------------------
# Define quantidade máxima de conex?es para o pool
spring.datasource.hikari.maximum-pool-size=5
# Define quantidade mínima de conex?es para o pool
spring.datasource.hikari.minimum-idle=3
# Define o tempo máximo em milissegundos para esperar uma conexão estar disponível
spring.datasource.hikari.connection-timeout=80000
# Define tempo limite de ociosidade para conexões excedentes (ex: 15 segundos = 15000) - define o tempo máximo em milissegundos para uma conexão ficar inativa antes de ser fechada
spring.datasource.hikari.idle-timeout=15000
# Define o tempo máximo em milissegundos para uma conexão viver antes de ser fechada.
spring.datasource.hikari.max-lifetime=1800000
# --------------------------------------------------



# --------------------------------------------------
# CONFIGURAÇÃO DE SSL
# --------------------------------------------------
# Se precisa de uma conexão segura SSL com o banco de dados, use as configurações abaixo.
# Isso habilita o SSL e define o modo de SSL como "require", o que significa que as conexões
# sem SSL serão rejeitadas.
# --------------------------------------------------
spring.datasource.ssl=true
spring.datasource.sslmode=require
# --------------------------------------------------



# --------------------------------------------------
# CONFIGURAÇÃO DE SQL
# --------------------------------------------------
# Configurações de tempo de execução do SQL. Essas configurações controlam o tempo de execução de
# consultas SQL e podem ser úteis para depurar consultas problemáticas.
# --------------------------------------------------
# Permite o registro de consultas lentas no log. O valor padrão é "false".
spring.datasource.log-slow-sql=true
# permite que você especifique um interceptador personalizado para tratar consultas lentas ou
# outras operações relacionadas a banco de dados.
spring.datasource.jdbc-interceptors=com.example.MySlowQueryInterceptor
# --------------------------------------------------

